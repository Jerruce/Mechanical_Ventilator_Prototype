/*++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
/*                                                      */
/* File:  flow_fuzzy_inc_controller.c                   */
/*                                                      */
/* Author: Automatically generated by Xfuzzy            */
/*                                                      */
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

#include <stdio.h>
#include <math.h>
#include "flow_fuzzy_inc_controller.h"

/*======================================================*/
/*  Common function to compute a fuzzy number           */
/*======================================================*/

static double compute(FuzzyNumber fn,double x) {
 int length = fn.length;
 int i;
 double imp = fn.imp(fn.degree[0],fn.conc[0].equal(x));
 double mu = imp;

 for(i=1; i<length; i++) {
  imp = fn.imp(fn.degree[i],fn.conc[i].equal(x));
  mu = fn.also(mu,imp);
 }
 return mu;
}

/*======================================================*/
/*  MembershipFunction FMF_xfl_triangular               */
/*======================================================*/

/*------------------------------------------------------*/
/* Function to compute an equal relationship            */
/*------------------------------------------------------*/

static double FMF_xfl_triangular_equal(double x, int i, double min, double max, double step, double *p, int length) {
      double a = (i==0? min-1 : (i==1 ? min : p[i-2]));
      double b = (i==0? min : (i==length+1? max : p[i-1]));
      double c = (i==length? max : (i==length+1? max+1 : p[i]));
      return (a<x && x<=b? (x-a)/(b-a) : (b<x && x<c? (c-x)/(c-b) : 0));
}

/*======================================================*/
/*  Operatorset OP_pip_ope                              */
/*======================================================*/

/*------------------------------------------------------*/
/* Description of the operator AND                      */
/*------------------------------------------------------*/

static double OP_pip_ope_And(double a, double b) {
    return (a<b? a : b); 

}

/*------------------------------------------------------*/
/* Description of the operator ALSO                     */
/*------------------------------------------------------*/

static double OP_pip_ope_Also(double a, double b) {
    return (a>b? a : b); 

}

/*------------------------------------------------------*/
/* Description of the operator IMPLICATION              */
/*------------------------------------------------------*/

static double OP_pip_ope_Imp(double a, double b) {
    return (a<b? a : b); 

}

/*------------------------------------------------------*/
/* Description of the defuzzification method            */
/*------------------------------------------------------*/

static double OP_pip_ope_Defuz(FuzzyNumber mf) {
 double min = mf.min;
 double max = mf.max;
 double step = mf.step;
     double x, m, out=min, maximum=0;
     int counter = 1;
     for(x=min; x<=max; x+=step) {
      m = compute(mf,x);
      if(m == maximum) { out+=x; counter++; }
      if(m > maximum) { maximum = m; out = x; counter = 1; }
     }
     return out/counter;

}


/*======================================================*/
/*  TypeLV TP_error_t                                   */
/*======================================================*/

/*------------------------------------------------------*/
/* Description of the family fam                        */
/*------------------------------------------------------*/

static double TP_error_t_fam_equal(double x, int i){
   double list[5] = {-0.6666666666666667,-0.33333333333333337,0.0,0.33333333333333326,0.6666666666666665};
   return FMF_xfl_triangular_equal(x,i,-1.0,1.0,0.00784313725490196,list,5);
}

/*------------------------------------------------------*/
/* Description of the label NB                          */
/*------------------------------------------------------*/

static double TP_error_t_NB_equal(double x){
   return TP_error_t_fam_equal(x,0);}

/*------------------------------------------------------*/
/* Description of the label NM                          */
/*------------------------------------------------------*/

static double TP_error_t_NM_equal(double x){
   return TP_error_t_fam_equal(x,1);}

/*------------------------------------------------------*/
/* Description of the label NS                          */
/*------------------------------------------------------*/

static double TP_error_t_NS_equal(double x){
   return TP_error_t_fam_equal(x,2);}

/*------------------------------------------------------*/
/* Description of the label Z                           */
/*------------------------------------------------------*/

static double TP_error_t_Z_equal(double x){
   return TP_error_t_fam_equal(x,3);}

/*------------------------------------------------------*/
/* Description of the label PS                          */
/*------------------------------------------------------*/

static double TP_error_t_PS_equal(double x){
   return TP_error_t_fam_equal(x,4);}

/*------------------------------------------------------*/
/* Description of the label PM                          */
/*------------------------------------------------------*/

static double TP_error_t_PM_equal(double x){
   return TP_error_t_fam_equal(x,5);}

/*------------------------------------------------------*/
/* Description of the label PB                          */
/*------------------------------------------------------*/

static double TP_error_t_PB_equal(double x){
   return TP_error_t_fam_equal(x,6);}

/*======================================================*/
/*  TypeLV TP_change_error_t                            */
/*======================================================*/

/*------------------------------------------------------*/
/* Description of the family fam                        */
/*------------------------------------------------------*/

static double TP_change_error_t_fam_equal(double x, int i){
   double list[5] = {-0.6666666666666667,-0.33333333333333337,0.0,0.33333333333333326,0.6666666666666665};
   return FMF_xfl_triangular_equal(x,i,-1.0,1.0,0.00784313725490196,list,5);
}

/*------------------------------------------------------*/
/* Description of the label NB                          */
/*------------------------------------------------------*/

static double TP_change_error_t_NB_equal(double x){
   return TP_change_error_t_fam_equal(x,0);}

/*------------------------------------------------------*/
/* Description of the label NM                          */
/*------------------------------------------------------*/

static double TP_change_error_t_NM_equal(double x){
   return TP_change_error_t_fam_equal(x,1);}

/*------------------------------------------------------*/
/* Description of the label NS                          */
/*------------------------------------------------------*/

static double TP_change_error_t_NS_equal(double x){
   return TP_change_error_t_fam_equal(x,2);}

/*------------------------------------------------------*/
/* Description of the label Z                           */
/*------------------------------------------------------*/

static double TP_change_error_t_Z_equal(double x){
   return TP_change_error_t_fam_equal(x,3);}

/*------------------------------------------------------*/
/* Description of the label PS                          */
/*------------------------------------------------------*/

static double TP_change_error_t_PS_equal(double x){
   return TP_change_error_t_fam_equal(x,4);}

/*------------------------------------------------------*/
/* Description of the label PM                          */
/*------------------------------------------------------*/

static double TP_change_error_t_PM_equal(double x){
   return TP_change_error_t_fam_equal(x,5);}

/*------------------------------------------------------*/
/* Description of the label PB                          */
/*------------------------------------------------------*/

static double TP_change_error_t_PB_equal(double x){
   return TP_change_error_t_fam_equal(x,6);}

/*======================================================*/
/*  TypeLV TP_output_t                                  */
/*======================================================*/

/*------------------------------------------------------*/
/* Description of the family fam                        */
/*------------------------------------------------------*/

static double TP_output_t_fam_equal(double x, int i){
   double list[5] = {-0.6666666666666667,-0.33333333333333337,0.0,0.33333333333333326,0.6666666666666665};
   return FMF_xfl_triangular_equal(x,i,-1.0,1.0,0.00784313725490196,list,5);
}

/*------------------------------------------------------*/
/* Description of the label NB                          */
/*------------------------------------------------------*/

static double TP_output_t_NB_equal(double x){
   return TP_output_t_fam_equal(x,0);}

/*------------------------------------------------------*/
/* Description of the label NM                          */
/*------------------------------------------------------*/

static double TP_output_t_NM_equal(double x){
   return TP_output_t_fam_equal(x,1);}

/*------------------------------------------------------*/
/* Description of the label NS                          */
/*------------------------------------------------------*/

static double TP_output_t_NS_equal(double x){
   return TP_output_t_fam_equal(x,2);}

/*------------------------------------------------------*/
/* Description of the label Z                           */
/*------------------------------------------------------*/

static double TP_output_t_Z_equal(double x){
   return TP_output_t_fam_equal(x,3);}

/*------------------------------------------------------*/
/* Description of the label PS                          */
/*------------------------------------------------------*/

static double TP_output_t_PS_equal(double x){
   return TP_output_t_fam_equal(x,4);}

/*------------------------------------------------------*/
/* Description of the label PM                          */
/*------------------------------------------------------*/

static double TP_output_t_PM_equal(double x){
   return TP_output_t_fam_equal(x,5);}

/*------------------------------------------------------*/
/* Description of the label PB                          */
/*------------------------------------------------------*/

static double TP_output_t_PB_equal(double x){
   return TP_output_t_fam_equal(x,6);}

/*======================================================*/
/*  Rulebase RL_fuzzy_inc_rules                         */
/*======================================================*/

static void RL_fuzzy_inc_rules(double de, double e, double *output) {
 double _rl;

 double _output_degree[49];
 Consequent _output_conc[49];
 FuzzyNumber _output;
 _output.min = -1.0;
 _output.max = 1.0;
 _output.step = 0.00784313725490196;
 _output.imp = OP_pip_ope_Imp;
 _output.also = OP_pip_ope_Also;
 _output.length = 49;
 _output.degree = _output_degree;
 _output.conc = _output_conc;
 int _output_i = 0;

 double _de_eq[7];
 _de_eq[0] = TP_change_error_t_NB_equal(de);
 _de_eq[1] = TP_change_error_t_NM_equal(de);
 _de_eq[2] = TP_change_error_t_NS_equal(de);
 _de_eq[3] = TP_change_error_t_Z_equal(de);
 _de_eq[4] = TP_change_error_t_PS_equal(de);
 _de_eq[5] = TP_change_error_t_PM_equal(de);
 _de_eq[6] = TP_change_error_t_PB_equal(de);

 double _e_eq[7];
 _e_eq[0] = TP_error_t_NB_equal(e);
 _e_eq[1] = TP_error_t_NM_equal(e);
 _e_eq[2] = TP_error_t_NS_equal(e);
 _e_eq[3] = TP_error_t_Z_equal(e);
 _e_eq[4] = TP_error_t_PS_equal(e);
 _e_eq[5] = TP_error_t_PM_equal(e);
 _e_eq[6] = TP_error_t_PB_equal(e);

 _rl = OP_pip_ope_And(_de_eq[0],_e_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NB_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[0],_e_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NB_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[0],_e_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NB_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[0],_e_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NB_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[0],_e_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NM_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[0],_e_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NS_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[0],_e_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_Z_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[1],_e_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NB_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[1],_e_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NB_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[1],_e_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NM_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[1],_e_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NM_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[1],_e_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NS_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[1],_e_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_Z_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[1],_e_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PS_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[2],_e_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NB_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[2],_e_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NM_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[2],_e_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NS_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[2],_e_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NS_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[2],_e_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_Z_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[2],_e_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PS_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[2],_e_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PM_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[3],_e_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NM_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[3],_e_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NM_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[3],_e_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NS_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[3],_e_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_Z_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[3],_e_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PS_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[3],_e_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PM_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[3],_e_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PM_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[4],_e_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NM_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[4],_e_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NS_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[4],_e_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_Z_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[4],_e_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PS_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[4],_e_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PS_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[4],_e_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PM_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[4],_e_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PB_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[5],_e_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_NS_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[5],_e_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_Z_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[5],_e_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PS_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[5],_e_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PM_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[5],_e_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PM_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[5],_e_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PB_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[5],_e_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PB_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[6],_e_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_Z_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[6],_e_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PS_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[6],_e_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PM_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[6],_e_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PB_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[6],_e_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PB_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[6],_e_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PB_equal;
 _output_i++;

 _rl = OP_pip_ope_And(_de_eq[6],_e_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_PB_equal;
 _output_i++;

 *output = OP_pip_ope_Defuz(_output);
}


/*======================================================*/
/*                   Inference Engine                   */
/*======================================================*/

void flow_fuzzy_inc_controllerInferenceEngine(double change_error, double error, double *_d_output) {
 double output;
 RL_fuzzy_inc_rules(change_error, error, &output);
 *_d_output = output;
}

