/*++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
/*                                                      */
/* File:  pip_fuzzy_controller.c                        */
/*                                                      */
/* Author: Automatically generated by Xfuzzy            */
/*                                                      */
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

#include <stdio.h>
#include <math.h>
#include "pip_fuzzy_controller.h"

/*======================================================*/
/*  MembershipFunction FMF_xfl_triangular               */
/*======================================================*/

/*------------------------------------------------------*/
/* Function to compute an equal relationship            */
/*------------------------------------------------------*/

static double FMF_xfl_triangular_equal(double x, int i, double min, double max, double step, double *p, int length) {
      double a = (i==0? min-1 : (i==1 ? min : p[i-2]));
      double b = (i==0? min : (i==length+1? max : p[i-1]));
      double c = (i==length? max : (i==length+1? max+1 : p[i]));
      return (a<x && x<=b? (x-a)/(b-a) : (b<x && x<c? (c-x)/(c-b) : 0));
}

/*======================================================*/
/*  MembershipFunction MF_xfl_trapezoid                 */
/*======================================================*/

/*------------------------------------------------------*/
/* Function to compute an equal relationship            */
/*------------------------------------------------------*/

static double MF_xfl_trapezoid_equal(double x, double min, double max, double step, double a, double b, double c, double d) {
    return (x<a || x>d? 0: (x<b? (x-a)/(b-a) : (x<c?1 : (d-x)/(d-c)))); 

}

/*======================================================*/
/*  MembershipFunction MF_xfl_triangle                  */
/*======================================================*/

/*------------------------------------------------------*/
/* Function to compute an equal relationship            */
/*------------------------------------------------------*/

static double MF_xfl_triangle_equal(double x, double min, double max, double step, double a, double b, double c) {
    return (a<x && x<=b? (x-a)/(b-a) : (b<x && x<c? (c-x)/(c-b) : 0)); 

}

/*======================================================*/
/*  MembershipFunction MF_xfl_singleton                 */
/*======================================================*/

/*------------------------------------------------------*/
/* Function to compute an equal relationship            */
/*------------------------------------------------------*/

static double MF_xfl_singleton_equal(double x, double min, double max, double step, double a) {
    return (x==a? 1 : 0); 

}

/*======================================================*/
/*  Operatorset OP_pip_ope                              */
/*======================================================*/

/*------------------------------------------------------*/
/* Description of the operator AND                      */
/*------------------------------------------------------*/

static double OP_pip_ope_And(double a, double b) {
    return a*b; 

}

/*------------------------------------------------------*/
/* Description of the defuzzification method            */
/*------------------------------------------------------*/

static double OP_pip_ope_Defuz(FuzzyNumber mf) {
 double min = mf.min;
 double max = mf.max;
     double num=0, denom=0;
     int i;
     for(i=0; i<mf.length; i++) {
      num += mf.degree[i] * mf.conc[i].center();
      denom += mf.degree[i];
     }
     if(denom==0) return (min+max)/2;
     return num/denom;

}


/*======================================================*/
/*  TypeLV TP_error_t                                   */
/*======================================================*/

/*------------------------------------------------------*/
/* Description of the label EN_5                        */
/*------------------------------------------------------*/

static double TP_error_t_EN_5_equal(double x){
   return MF_xfl_trapezoid_equal(x,-60.0,60.0,0.47058823529411764,-70.0,-60.0,-20.0,-16.0);
}

/*------------------------------------------------------*/
/* Description of the label EN_4                        */
/*------------------------------------------------------*/

static double TP_error_t_EN_4_equal(double x){
   return MF_xfl_triangle_equal(x,-60.0,60.0,0.47058823529411764,-20.0,-16.0,-12.0);
}

/*------------------------------------------------------*/
/* Description of the label EN_3                        */
/*------------------------------------------------------*/

static double TP_error_t_EN_3_equal(double x){
   return MF_xfl_triangle_equal(x,-60.0,60.0,0.47058823529411764,-16.0,-12.0,-8.0);
}

/*------------------------------------------------------*/
/* Description of the label EN_2                        */
/*------------------------------------------------------*/

static double TP_error_t_EN_2_equal(double x){
   return MF_xfl_triangle_equal(x,-60.0,60.0,0.47058823529411764,-12.0,-8.0,-4.0);
}

/*------------------------------------------------------*/
/* Description of the label EN_1                        */
/*------------------------------------------------------*/

static double TP_error_t_EN_1_equal(double x){
   return MF_xfl_triangle_equal(x,-60.0,60.0,0.47058823529411764,-8.0,-4.0,0.0);
}

/*------------------------------------------------------*/
/* Description of the label EC                          */
/*------------------------------------------------------*/

static double TP_error_t_EC_equal(double x){
   return MF_xfl_triangle_equal(x,-60.0,60.0,0.47058823529411764,-4.0,0.0,4.0);
}

/*------------------------------------------------------*/
/* Description of the label EP_1                        */
/*------------------------------------------------------*/

static double TP_error_t_EP_1_equal(double x){
   return MF_xfl_triangle_equal(x,-60.0,60.0,0.47058823529411764,0.0,4.0,8.0);
}

/*------------------------------------------------------*/
/* Description of the label EP_2                        */
/*------------------------------------------------------*/

static double TP_error_t_EP_2_equal(double x){
   return MF_xfl_triangle_equal(x,-60.0,60.0,0.47058823529411764,4.0,8.0,12.0);
}

/*------------------------------------------------------*/
/* Description of the label EP_3                        */
/*------------------------------------------------------*/

static double TP_error_t_EP_3_equal(double x){
   return MF_xfl_triangle_equal(x,-60.0,60.0,0.47058823529411764,8.0,12.0,16.0);
}

/*------------------------------------------------------*/
/* Description of the label EP_4                        */
/*------------------------------------------------------*/

static double TP_error_t_EP_4_equal(double x){
   return MF_xfl_triangle_equal(x,-60.0,60.0,0.47058823529411764,12.0,16.0,20.0);
}

/*------------------------------------------------------*/
/* Description of the label EP_5                        */
/*------------------------------------------------------*/

static double TP_error_t_EP_5_equal(double x){
   return MF_xfl_trapezoid_equal(x,-60.0,60.0,0.47058823529411764,16.0,20.0,60.0,70.0);
}

/*======================================================*/
/*  TypeLV TP_change_error_t                            */
/*======================================================*/

/*------------------------------------------------------*/
/* Description of the family fam                        */
/*------------------------------------------------------*/

static double TP_change_error_t_fam_equal(double x, int i){
   double list[9] = {-8.0,-6.0,-4.0,-2.0,0.0,2.0,4.0,6.0,8.0};
   return FMF_xfl_triangular_equal(x,i,-10.0,10.0,0.0784313725490196,list,9);
}

/*------------------------------------------------------*/
/* Description of the label CEN_5                       */
/*------------------------------------------------------*/

static double TP_change_error_t_CEN_5_equal(double x){
   return TP_change_error_t_fam_equal(x,0);}

/*------------------------------------------------------*/
/* Description of the label CEN_4                       */
/*------------------------------------------------------*/

static double TP_change_error_t_CEN_4_equal(double x){
   return TP_change_error_t_fam_equal(x,1);}

/*------------------------------------------------------*/
/* Description of the label CEN_3                       */
/*------------------------------------------------------*/

static double TP_change_error_t_CEN_3_equal(double x){
   return TP_change_error_t_fam_equal(x,2);}

/*------------------------------------------------------*/
/* Description of the label CEN_2                       */
/*------------------------------------------------------*/

static double TP_change_error_t_CEN_2_equal(double x){
   return TP_change_error_t_fam_equal(x,3);}

/*------------------------------------------------------*/
/* Description of the label CEN_1                       */
/*------------------------------------------------------*/

static double TP_change_error_t_CEN_1_equal(double x){
   return TP_change_error_t_fam_equal(x,4);}

/*------------------------------------------------------*/
/* Description of the label CEC                         */
/*------------------------------------------------------*/

static double TP_change_error_t_CEC_equal(double x){
   return TP_change_error_t_fam_equal(x,5);}

/*------------------------------------------------------*/
/* Description of the label CEP_1                       */
/*------------------------------------------------------*/

static double TP_change_error_t_CEP_1_equal(double x){
   return TP_change_error_t_fam_equal(x,6);}

/*------------------------------------------------------*/
/* Description of the label CEP_2                       */
/*------------------------------------------------------*/

static double TP_change_error_t_CEP_2_equal(double x){
   return TP_change_error_t_fam_equal(x,7);}

/*------------------------------------------------------*/
/* Description of the label CEP_3                       */
/*------------------------------------------------------*/

static double TP_change_error_t_CEP_3_equal(double x){
   return TP_change_error_t_fam_equal(x,8);}

/*------------------------------------------------------*/
/* Description of the label CEP_4                       */
/*------------------------------------------------------*/

static double TP_change_error_t_CEP_4_equal(double x){
   return TP_change_error_t_fam_equal(x,9);}

/*------------------------------------------------------*/
/* Description of the label CEP_5                       */
/*------------------------------------------------------*/

static double TP_change_error_t_CEP_5_equal(double x){
   return TP_change_error_t_fam_equal(x,10);}

/*======================================================*/
/*  TypeLV TP_output_t                                  */
/*======================================================*/

/*------------------------------------------------------*/
/* Description of the label SN_5                        */
/*------------------------------------------------------*/

static double TP_output_t_SN_5_equal(double x){
   return MF_xfl_singleton_equal(x,-100.0,100.0,0.7843137254901961,-100.0);
}

static double TP_output_t_SN_5_center(){
   return -100.0;
}

/*------------------------------------------------------*/
/* Description of the label SN_4                        */
/*------------------------------------------------------*/

static double TP_output_t_SN_4_equal(double x){
   return MF_xfl_singleton_equal(x,-100.0,100.0,0.7843137254901961,-80.0);
}

static double TP_output_t_SN_4_center(){
   return -80.0;
}

/*------------------------------------------------------*/
/* Description of the label SN_3                        */
/*------------------------------------------------------*/

static double TP_output_t_SN_3_equal(double x){
   return MF_xfl_singleton_equal(x,-100.0,100.0,0.7843137254901961,-60.0);
}

static double TP_output_t_SN_3_center(){
   return -60.0;
}

/*------------------------------------------------------*/
/* Description of the label SN_2                        */
/*------------------------------------------------------*/

static double TP_output_t_SN_2_equal(double x){
   return MF_xfl_singleton_equal(x,-100.0,100.0,0.7843137254901961,-40.0);
}

static double TP_output_t_SN_2_center(){
   return -40.0;
}

/*------------------------------------------------------*/
/* Description of the label SN_1                        */
/*------------------------------------------------------*/

static double TP_output_t_SN_1_equal(double x){
   return MF_xfl_singleton_equal(x,-100.0,100.0,0.7843137254901961,-20.0);
}

static double TP_output_t_SN_1_center(){
   return -20.0;
}

/*------------------------------------------------------*/
/* Description of the label SC                          */
/*------------------------------------------------------*/

static double TP_output_t_SC_equal(double x){
   return MF_xfl_singleton_equal(x,-100.0,100.0,0.7843137254901961,0.0);
}

static double TP_output_t_SC_center(){
   return 0.0;
}

/*------------------------------------------------------*/
/* Description of the label SP_1                        */
/*------------------------------------------------------*/

static double TP_output_t_SP_1_equal(double x){
   return MF_xfl_singleton_equal(x,-100.0,100.0,0.7843137254901961,20.0);
}

static double TP_output_t_SP_1_center(){
   return 20.0;
}

/*------------------------------------------------------*/
/* Description of the label SP_2                        */
/*------------------------------------------------------*/

static double TP_output_t_SP_2_equal(double x){
   return MF_xfl_singleton_equal(x,-100.0,100.0,0.7843137254901961,40.0);
}

static double TP_output_t_SP_2_center(){
   return 40.0;
}

/*------------------------------------------------------*/
/* Description of the label SP_3                        */
/*------------------------------------------------------*/

static double TP_output_t_SP_3_equal(double x){
   return MF_xfl_singleton_equal(x,-100.0,100.0,0.7843137254901961,60.0);
}

static double TP_output_t_SP_3_center(){
   return 60.0;
}

/*------------------------------------------------------*/
/* Description of the label SP_4                        */
/*------------------------------------------------------*/

static double TP_output_t_SP_4_equal(double x){
   return MF_xfl_singleton_equal(x,-100.0,100.0,0.7843137254901961,80.0);
}

static double TP_output_t_SP_4_center(){
   return 80.0;
}

/*------------------------------------------------------*/
/* Description of the label SP_5                        */
/*------------------------------------------------------*/

static double TP_output_t_SP_5_equal(double x){
   return MF_xfl_singleton_equal(x,-100.0,100.0,0.7843137254901961,100.0);
}

static double TP_output_t_SP_5_center(){
   return 100.0;
}

/*======================================================*/
/*  Rulebase RL_pip_rules                               */
/*======================================================*/

static void RL_pip_rules(double error, double change_error, double *output) {
 double _rl;

 double _output_degree[121];
 Consequent _output_conc[121];
 FuzzyNumber _output;
 _output.min = -100.0;
 _output.max = 100.0;
 _output.step = 0.7843137254901961;
 _output.length = 121;
 _output.degree = _output_degree;
 _output.conc = _output_conc;
 int _output_i = 0;

 double _error_eq[11];
 _error_eq[0] = TP_error_t_EN_5_equal(error);
 _error_eq[1] = TP_error_t_EN_4_equal(error);
 _error_eq[2] = TP_error_t_EN_3_equal(error);
 _error_eq[3] = TP_error_t_EN_2_equal(error);
 _error_eq[4] = TP_error_t_EN_1_equal(error);
 _error_eq[5] = TP_error_t_EC_equal(error);
 _error_eq[6] = TP_error_t_EP_1_equal(error);
 _error_eq[7] = TP_error_t_EP_2_equal(error);
 _error_eq[8] = TP_error_t_EP_3_equal(error);
 _error_eq[9] = TP_error_t_EP_4_equal(error);
 _error_eq[10] = TP_error_t_EP_5_equal(error);

 double _change_error_eq[11];
 _change_error_eq[0] = TP_change_error_t_CEN_5_equal(change_error);
 _change_error_eq[1] = TP_change_error_t_CEN_4_equal(change_error);
 _change_error_eq[2] = TP_change_error_t_CEN_3_equal(change_error);
 _change_error_eq[3] = TP_change_error_t_CEN_2_equal(change_error);
 _change_error_eq[4] = TP_change_error_t_CEN_1_equal(change_error);
 _change_error_eq[5] = TP_change_error_t_CEC_equal(change_error);
 _change_error_eq[6] = TP_change_error_t_CEP_1_equal(change_error);
 _change_error_eq[7] = TP_change_error_t_CEP_2_equal(change_error);
 _change_error_eq[8] = TP_change_error_t_CEP_3_equal(change_error);
 _change_error_eq[9] = TP_change_error_t_CEP_4_equal(change_error);
 _change_error_eq[10] = TP_change_error_t_CEP_5_equal(change_error);

 _rl = OP_pip_ope_And(_error_eq[0],_change_error_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[0],_change_error_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[0],_change_error_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[0],_change_error_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[0],_change_error_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[0],_change_error_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[0],_change_error_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[0],_change_error_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[0],_change_error_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[0],_change_error_eq[9]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[0],_change_error_eq[10]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[1],_change_error_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[1],_change_error_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[1],_change_error_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[1],_change_error_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[1],_change_error_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[1],_change_error_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[1],_change_error_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[1],_change_error_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[1],_change_error_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[1],_change_error_eq[9]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[1],_change_error_eq[10]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[2],_change_error_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[2],_change_error_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[2],_change_error_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[2],_change_error_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[2],_change_error_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[2],_change_error_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[2],_change_error_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[2],_change_error_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[2],_change_error_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[2],_change_error_eq[9]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[2],_change_error_eq[10]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[3],_change_error_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[3],_change_error_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[3],_change_error_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[3],_change_error_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[3],_change_error_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[3],_change_error_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[3],_change_error_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[3],_change_error_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[3],_change_error_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[3],_change_error_eq[9]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[3],_change_error_eq[10]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[4],_change_error_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[4],_change_error_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[4],_change_error_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[4],_change_error_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[4],_change_error_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[4],_change_error_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[4],_change_error_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[4],_change_error_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[4],_change_error_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[4],_change_error_eq[9]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[4],_change_error_eq[10]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[5],_change_error_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[5],_change_error_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[5],_change_error_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[5],_change_error_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[5],_change_error_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[5],_change_error_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[5],_change_error_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[5],_change_error_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[5],_change_error_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[5],_change_error_eq[9]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[5],_change_error_eq[10]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_5_equal;
 _output_conc[_output_i].center = TP_output_t_SN_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[6],_change_error_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_1_equal;
 _output_conc[_output_i].center = TP_output_t_SN_1_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[6],_change_error_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_1_equal;
 _output_conc[_output_i].center = TP_output_t_SN_1_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[6],_change_error_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_1_equal;
 _output_conc[_output_i].center = TP_output_t_SN_1_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[6],_change_error_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_1_equal;
 _output_conc[_output_i].center = TP_output_t_SN_1_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[6],_change_error_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_1_equal;
 _output_conc[_output_i].center = TP_output_t_SN_1_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[6],_change_error_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_1_equal;
 _output_conc[_output_i].center = TP_output_t_SN_1_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[6],_change_error_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_1_equal;
 _output_conc[_output_i].center = TP_output_t_SN_1_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[6],_change_error_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_1_equal;
 _output_conc[_output_i].center = TP_output_t_SN_1_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[6],_change_error_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_3_equal;
 _output_conc[_output_i].center = TP_output_t_SN_3_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[6],_change_error_eq[9]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_3_equal;
 _output_conc[_output_i].center = TP_output_t_SN_3_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[6],_change_error_eq[10]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SN_3_equal;
 _output_conc[_output_i].center = TP_output_t_SN_3_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[7],_change_error_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_3_equal;
 _output_conc[_output_i].center = TP_output_t_SP_3_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[7],_change_error_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_3_equal;
 _output_conc[_output_i].center = TP_output_t_SP_3_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[7],_change_error_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_3_equal;
 _output_conc[_output_i].center = TP_output_t_SP_3_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[7],_change_error_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[7],_change_error_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[7],_change_error_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[7],_change_error_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[7],_change_error_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[7],_change_error_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[7],_change_error_eq[9]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[7],_change_error_eq[10]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[8],_change_error_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[8],_change_error_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[8],_change_error_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[8],_change_error_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[8],_change_error_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[8],_change_error_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[8],_change_error_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[8],_change_error_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[8],_change_error_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[8],_change_error_eq[9]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[8],_change_error_eq[10]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[9],_change_error_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[9],_change_error_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[9],_change_error_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[9],_change_error_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[9],_change_error_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[9],_change_error_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[9],_change_error_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[9],_change_error_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[9],_change_error_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[9],_change_error_eq[9]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[9],_change_error_eq[10]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[10],_change_error_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[10],_change_error_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[10],_change_error_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[10],_change_error_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[10],_change_error_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[10],_change_error_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[10],_change_error_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[10],_change_error_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[10],_change_error_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[10],_change_error_eq[9]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 _rl = OP_pip_ope_And(_error_eq[10],_change_error_eq[10]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_output_t_SP_5_equal;
 _output_conc[_output_i].center = TP_output_t_SP_5_center;
 _output_i++;

 *output = OP_pip_ope_Defuz(_output);
}


/*======================================================*/
/*                   Inference Engine                   */
/*======================================================*/

void pip_fuzzy_controllerInferenceEngine(double error, double change_error, double *_d_output) {
 double output;
 RL_pip_rules(error, change_error, &output);
 *_d_output = output;
}

