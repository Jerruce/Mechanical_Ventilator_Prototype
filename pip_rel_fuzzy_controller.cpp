/*++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
/*                                                      */
/* File:  pip_rel_fuzzy_controller.c                    */
/*                                                      */
/* Author: Automatically generated by Xfuzzy            */
/*                                                      */
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

#include <stdio.h>
#include <math.h>
#include "pip_rel_fuzzy_controller.h"

/*======================================================*/
/*  MembershipFunction FMF_xfl_triangular               */
/*======================================================*/

/*------------------------------------------------------*/
/* Function to compute an equal relationship            */
/*------------------------------------------------------*/

static double FMF_xfl_triangular_equal(double x, int i, double min, double max, double step, double *p, int length) {
      double a = (i==0? min-1 : (i==1 ? min : p[i-2]));
      double b = (i==0? min : (i==length+1? max : p[i-1]));
      double c = (i==length? max : (i==length+1? max+1 : p[i]));
      return (a<x && x<=b? (x-a)/(b-a) : (b<x && x<c? (c-x)/(c-b) : 0));
}

/*------------------------------------------------------*/
/* Function to compute the center of the MF             */
/*------------------------------------------------------*/

static double FMF_xfl_triangular_center(int i, double min, double max, double step, double *p, int length) {
      double b = (i==0? min : (i==length+1? max : p[i-1]));
      return b;
}

/*======================================================*/
/*  MembershipFunction MF_xfl_trapezoid                 */
/*======================================================*/

/*------------------------------------------------------*/
/* Function to compute an equal relationship            */
/*------------------------------------------------------*/

static double MF_xfl_trapezoid_equal(double x, double min, double max, double step, double a, double b, double c, double d) {
    return (x<a || x>d? 0: (x<b? (x-a)/(b-a) : (x<c?1 : (d-x)/(d-c)))); 

}

/*======================================================*/
/*  MembershipFunction MF_xfl_triangle                  */
/*======================================================*/

/*------------------------------------------------------*/
/* Function to compute an equal relationship            */
/*------------------------------------------------------*/

static double MF_xfl_triangle_equal(double x, double min, double max, double step, double a, double b, double c) {
    return (a<x && x<=b? (x-a)/(b-a) : (b<x && x<c? (c-x)/(c-b) : 0)); 

}

/*======================================================*/
/*  Operatorset OP_pip_release_ope                      */
/*======================================================*/

/*------------------------------------------------------*/
/* Description of the operator AND                      */
/*------------------------------------------------------*/

static double OP_pip_release_ope_And(double a, double b) {
    return a*b; 

}

/*------------------------------------------------------*/
/* Description of the defuzzification method            */
/*------------------------------------------------------*/

static double OP_pip_release_ope_Defuz(FuzzyNumber mf) {
 double min = mf.min;
 double max = mf.max;
     double num=0, denom=0;
     int i;
     for(i=0; i<mf.length; i++) {
      num += mf.degree[i] * mf.conc[i].center();
      denom += mf.degree[i];
     }
     if(denom==0) return (min+max)/2;
     return num/denom;

}


/*======================================================*/
/*  TypeLV TP_pip_setpiont_t                            */
/*======================================================*/

/*------------------------------------------------------*/
/* Description of the family fam                        */
/*------------------------------------------------------*/

static double TP_pip_setpiont_t_fam_equal(double x, int i){
   double list[7] = {6.25,12.5,18.75,25.0,31.25,37.5,43.75};
   return FMF_xfl_triangular_equal(x,i,0.0,50.0,0.19607843137254902,list,7);
}

/*------------------------------------------------------*/
/* Description of the label sp0                         */
/*------------------------------------------------------*/

static double TP_pip_setpiont_t_sp0_equal(double x){
   return TP_pip_setpiont_t_fam_equal(x,0);}

/*------------------------------------------------------*/
/* Description of the label sp1                         */
/*------------------------------------------------------*/

static double TP_pip_setpiont_t_sp1_equal(double x){
   return TP_pip_setpiont_t_fam_equal(x,1);}

/*------------------------------------------------------*/
/* Description of the label sp2                         */
/*------------------------------------------------------*/

static double TP_pip_setpiont_t_sp2_equal(double x){
   return TP_pip_setpiont_t_fam_equal(x,2);}

/*------------------------------------------------------*/
/* Description of the label sp3                         */
/*------------------------------------------------------*/

static double TP_pip_setpiont_t_sp3_equal(double x){
   return TP_pip_setpiont_t_fam_equal(x,3);}

/*------------------------------------------------------*/
/* Description of the label sp4                         */
/*------------------------------------------------------*/

static double TP_pip_setpiont_t_sp4_equal(double x){
   return TP_pip_setpiont_t_fam_equal(x,4);}

/*------------------------------------------------------*/
/* Description of the label sp5                         */
/*------------------------------------------------------*/

static double TP_pip_setpiont_t_sp5_equal(double x){
   return TP_pip_setpiont_t_fam_equal(x,5);}

/*------------------------------------------------------*/
/* Description of the label sp6                         */
/*------------------------------------------------------*/

static double TP_pip_setpiont_t_sp6_equal(double x){
   return TP_pip_setpiont_t_fam_equal(x,6);}

/*------------------------------------------------------*/
/* Description of the label sp7                         */
/*------------------------------------------------------*/

static double TP_pip_setpiont_t_sp7_equal(double x){
   return TP_pip_setpiont_t_fam_equal(x,7);}

/*------------------------------------------------------*/
/* Description of the label sp8                         */
/*------------------------------------------------------*/

static double TP_pip_setpiont_t_sp8_equal(double x){
   return TP_pip_setpiont_t_fam_equal(x,8);}

/*======================================================*/
/*  TypeLV TP_pip_error_t                               */
/*======================================================*/

/*------------------------------------------------------*/
/* Description of the label EC                          */
/*------------------------------------------------------*/

static double TP_pip_error_t_EC_equal(double x){
   return MF_xfl_trapezoid_equal(x,-60.0,60.0,0.47058823529411764,-72.0,-60.0,0.0,6.0);
}

/*------------------------------------------------------*/
/* Description of the label EP1                         */
/*------------------------------------------------------*/

static double TP_pip_error_t_EP1_equal(double x){
   return MF_xfl_triangle_equal(x,-60.0,60.0,0.47058823529411764,0.0,6.0,12.0);
}

/*------------------------------------------------------*/
/* Description of the label EP2                         */
/*------------------------------------------------------*/

static double TP_pip_error_t_EP2_equal(double x){
   return MF_xfl_triangle_equal(x,-60.0,60.0,0.47058823529411764,6.0,12.0,18.0);
}

/*------------------------------------------------------*/
/* Description of the label EP3                         */
/*------------------------------------------------------*/

static double TP_pip_error_t_EP3_equal(double x){
   return MF_xfl_triangle_equal(x,-60.0,60.0,0.47058823529411764,12.0,18.0,24.0);
}

/*------------------------------------------------------*/
/* Description of the label EP4                         */
/*------------------------------------------------------*/

static double TP_pip_error_t_EP4_equal(double x){
   return MF_xfl_triangle_equal(x,-60.0,60.0,0.47058823529411764,18.0,24.0,30.0);
}

/*------------------------------------------------------*/
/* Description of the label EP5                         */
/*------------------------------------------------------*/

static double TP_pip_error_t_EP5_equal(double x){
   return MF_xfl_triangle_equal(x,-60.0,60.0,0.47058823529411764,24.0,30.0,36.0);
}

/*------------------------------------------------------*/
/* Description of the label EP6                         */
/*------------------------------------------------------*/

static double TP_pip_error_t_EP6_equal(double x){
   return MF_xfl_triangle_equal(x,-60.0,60.0,0.47058823529411764,30.0,36.0,42.0);
}

/*------------------------------------------------------*/
/* Description of the label EP7                         */
/*------------------------------------------------------*/

static double TP_pip_error_t_EP7_equal(double x){
   return MF_xfl_triangle_equal(x,-60.0,60.0,0.47058823529411764,36.0,42.0,48.0);
}

/*------------------------------------------------------*/
/* Description of the label EP8                         */
/*------------------------------------------------------*/

static double TP_pip_error_t_EP8_equal(double x){
   return MF_xfl_trapezoid_equal(x,-60.0,60.0,0.47058823529411764,42.0,48.0,60.0,72.0);
}

/*======================================================*/
/*  TypeLV TP_pip_output_t                              */
/*======================================================*/

/*------------------------------------------------------*/
/* Description of the family fam                        */
/*------------------------------------------------------*/

static double TP_pip_output_t_fam_equal(double x, int i){
   double list[3] = {25.0,50.0,75.0};
   return FMF_xfl_triangular_equal(x,i,0.0,100.0,0.39215686274509803,list,3);
}

/*------------------------------------------------------*/
/* Description of the label MIN                         */
/*------------------------------------------------------*/

static double TP_pip_output_t_MIN_equal(double x){
   return TP_pip_output_t_fam_equal(x,0);}

static double TP_pip_output_t_MIN_center(){
   return 0.0;
}

/*------------------------------------------------------*/
/* Description of the label BAJO                        */
/*------------------------------------------------------*/

static double TP_pip_output_t_BAJO_equal(double x){
   return TP_pip_output_t_fam_equal(x,1);}

static double TP_pip_output_t_BAJO_center(){
   return 25.0;
}

/*------------------------------------------------------*/
/* Description of the label MEDIO                       */
/*------------------------------------------------------*/

static double TP_pip_output_t_MEDIO_equal(double x){
   return TP_pip_output_t_fam_equal(x,2);}

static double TP_pip_output_t_MEDIO_center(){
   return 50.0;
}

/*------------------------------------------------------*/
/* Description of the label ALTO                        */
/*------------------------------------------------------*/

static double TP_pip_output_t_ALTO_equal(double x){
   return TP_pip_output_t_fam_equal(x,3);}

static double TP_pip_output_t_ALTO_center(){
   return 75.0;
}

/*------------------------------------------------------*/
/* Description of the label MAX                         */
/*------------------------------------------------------*/

static double TP_pip_output_t_MAX_equal(double x){
   return TP_pip_output_t_fam_equal(x,4);}

static double TP_pip_output_t_MAX_center(){
   return 100.0;
}

/*======================================================*/
/*  Rulebase RL_pip_release_rules                       */
/*======================================================*/

static void RL_pip_release_rules(double error, double setpoint, double *output) {
 double _rl;

 double _output_degree[81];
 Consequent _output_conc[81];
 FuzzyNumber _output;
 _output.min = 0.0;
 _output.max = 100.0;
 _output.step = 0.39215686274509803;
 _output.length = 81;
 _output.degree = _output_degree;
 _output.conc = _output_conc;
 int _output_i = 0;

 double _error_eq[9];
 _error_eq[0] = TP_pip_error_t_EC_equal(error);
 _error_eq[1] = TP_pip_error_t_EP1_equal(error);
 _error_eq[2] = TP_pip_error_t_EP2_equal(error);
 _error_eq[3] = TP_pip_error_t_EP3_equal(error);
 _error_eq[4] = TP_pip_error_t_EP4_equal(error);
 _error_eq[5] = TP_pip_error_t_EP5_equal(error);
 _error_eq[6] = TP_pip_error_t_EP6_equal(error);
 _error_eq[7] = TP_pip_error_t_EP7_equal(error);
 _error_eq[8] = TP_pip_error_t_EP8_equal(error);

 double _setpoint_eq[9];
 _setpoint_eq[0] = TP_pip_setpiont_t_sp0_equal(setpoint);
 _setpoint_eq[1] = TP_pip_setpiont_t_sp1_equal(setpoint);
 _setpoint_eq[2] = TP_pip_setpiont_t_sp2_equal(setpoint);
 _setpoint_eq[3] = TP_pip_setpiont_t_sp3_equal(setpoint);
 _setpoint_eq[4] = TP_pip_setpiont_t_sp4_equal(setpoint);
 _setpoint_eq[5] = TP_pip_setpiont_t_sp5_equal(setpoint);
 _setpoint_eq[6] = TP_pip_setpiont_t_sp6_equal(setpoint);
 _setpoint_eq[7] = TP_pip_setpiont_t_sp7_equal(setpoint);
 _setpoint_eq[8] = TP_pip_setpiont_t_sp8_equal(setpoint);

 _rl = OP_pip_release_ope_And(_error_eq[0],_setpoint_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MAX_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MAX_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[0],_setpoint_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MAX_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MAX_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[0],_setpoint_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_ALTO_equal;
 _output_conc[_output_i].center = TP_pip_output_t_ALTO_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[0],_setpoint_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_ALTO_equal;
 _output_conc[_output_i].center = TP_pip_output_t_ALTO_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[0],_setpoint_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MEDIO_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MEDIO_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[0],_setpoint_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MEDIO_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MEDIO_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[0],_setpoint_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_BAJO_equal;
 _output_conc[_output_i].center = TP_pip_output_t_BAJO_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[0],_setpoint_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_BAJO_equal;
 _output_conc[_output_i].center = TP_pip_output_t_BAJO_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[0],_setpoint_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[1],_setpoint_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_ALTO_equal;
 _output_conc[_output_i].center = TP_pip_output_t_ALTO_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[1],_setpoint_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_ALTO_equal;
 _output_conc[_output_i].center = TP_pip_output_t_ALTO_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[1],_setpoint_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MEDIO_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MEDIO_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[1],_setpoint_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MEDIO_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MEDIO_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[1],_setpoint_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_BAJO_equal;
 _output_conc[_output_i].center = TP_pip_output_t_BAJO_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[1],_setpoint_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_BAJO_equal;
 _output_conc[_output_i].center = TP_pip_output_t_BAJO_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[1],_setpoint_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[1],_setpoint_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[1],_setpoint_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[2],_setpoint_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[2],_setpoint_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[2],_setpoint_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[2],_setpoint_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[2],_setpoint_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[2],_setpoint_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[2],_setpoint_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[2],_setpoint_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[2],_setpoint_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[3],_setpoint_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[3],_setpoint_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[3],_setpoint_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[3],_setpoint_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[3],_setpoint_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[3],_setpoint_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[3],_setpoint_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[3],_setpoint_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[3],_setpoint_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[4],_setpoint_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[4],_setpoint_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[4],_setpoint_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[4],_setpoint_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[4],_setpoint_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[4],_setpoint_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[4],_setpoint_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[4],_setpoint_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[4],_setpoint_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[5],_setpoint_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[5],_setpoint_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[5],_setpoint_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[5],_setpoint_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[5],_setpoint_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[5],_setpoint_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[5],_setpoint_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[5],_setpoint_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[5],_setpoint_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[6],_setpoint_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[6],_setpoint_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[6],_setpoint_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[6],_setpoint_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[6],_setpoint_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[6],_setpoint_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[6],_setpoint_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[6],_setpoint_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[6],_setpoint_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[7],_setpoint_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[7],_setpoint_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[7],_setpoint_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[7],_setpoint_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[7],_setpoint_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[7],_setpoint_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[7],_setpoint_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[7],_setpoint_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[7],_setpoint_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[8],_setpoint_eq[0]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[8],_setpoint_eq[1]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[8],_setpoint_eq[2]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[8],_setpoint_eq[3]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[8],_setpoint_eq[4]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[8],_setpoint_eq[5]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[8],_setpoint_eq[6]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[8],_setpoint_eq[7]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 _rl = OP_pip_release_ope_And(_error_eq[8],_setpoint_eq[8]);
 _output_degree[_output_i] = _rl;
 _output_conc[_output_i].equal = TP_pip_output_t_MIN_equal;
 _output_conc[_output_i].center = TP_pip_output_t_MIN_center;
 _output_i++;

 *output = OP_pip_release_ope_Defuz(_output);
}


/*======================================================*/
/*                   Inference Engine                   */
/*======================================================*/

void pip_rel_fuzzy_controllerInferenceEngine(double pip_error, double pip_setpoint, double *_d_pip_output) {
 double pip_output;
 RL_pip_release_rules(pip_error, pip_setpoint, &pip_output);
 *_d_pip_output = pip_output;
}

